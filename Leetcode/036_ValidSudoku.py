############################################################
##    FILENAME:   036_ValidSudoku.py    
##    VERSION:    1.0
##    SINCE:      2015-10-23
##    AUTHOR: 
##        Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
##
############################################################
##    Edited by MacVim
##    Documentation auto-generated by Snippet 
############################################################

class Solution:
    # @param board, a 9x9 2D array
    # @return a boolean
    def isValidSudoku(self, board):
        # grouping by its row, column, and block
        columns = [[] for c in range(9)]
        blocks = [[] for b in range(9)]
        for n in range(81): # for optimal performance
            r, c = n / 9, n % 9
            rb, cb = r / 3, c / 3
            b = rb * 3 + cb
            columns[c].append(board[r][c])
            blocks[b].append(board[r][c])
        # check all groups
        for r in range(9):
            if not self.isValidList(board[r]): return False
        for c in range(9): 
            if not self.isValidList(columns[c]): return False
        for b in range(9):
            if not self.isValidList(blocks[b]): return False
        # pass all check    
        return True
        
    def isValidList(self, L):
        # use hash table to do a linear-time check
        D = {}
        for i in range(len(L)):
            if L[i] != '.':
                if int(L[i]) in D: return False # already exists
                else: D.update({int(L[i]):True})
        return True
