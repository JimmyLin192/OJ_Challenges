/*###############################################################
## MODULE: 071_SimplifyPath.cpp
## VERSION: 1.0 
## SINCE 2015-10-23
## AUTHOR Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

class Solution {
public:
    string simplifyPath(string path) {
        // split the path string
        int n = path.size();
        int i = 0, start = 0;
        bool last_slash = false;
        vector<string> elements; 
        while (i < n) {
            if (path.at(i)=='/') {
                if (!last_slash) { 
                    // apply split 
                    elements.push_back(path.substr(start, i-start));
                    last_slash = true;
                }
                i ++; 
                start = i; 
            } else {
                i ++; 
                last_slash = false;
            }
        }
        if (start <= n-1)
            elements.push_back(path.substr(start, i-start));
        int nelem = elements.size();
        vector<string> nontrivial(0,"");
        for (int i = 0; i < nelem; i ++) {
            if (elements[i].compare("..")==0) {
                if (nontrivial.size() > 0)
                    nontrivial.pop_back();
            } else if (elements[i].compare(".")==0 or elements[i].size()==0)
                continue;
            else 
                nontrivial.push_back(elements[i]);
        }
        string res;
        int nontrivial_size = nontrivial.size();
        if (nontrivial_size == 0) return "/";
        for (int i = 0; i < nontrivial_size; i ++) 
                res = res + "/" + nontrivial[i];
        if (res.at(0)!='/') res.insert(res.begin(), '/');
        if (*(res.end()-1) =='/' and res.length() > 1) res.pop_back();
        return res; 
    }
};
