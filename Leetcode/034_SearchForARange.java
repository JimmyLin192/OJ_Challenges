/*##############################################################
## MODULE: 034_SearchForARange.java
## VERSION: 1.0 
## SINCE: 2015-10-23
## AUTHOR: 
##         JIMMY LIN (xl5224) - JimmyLin@utexas.edu  
##
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

public class Solution {
    public int[] searchRange(int[] A, int target) {
        int nIntegers = A.length;
        int end = A.length - 1;
        int start = 0;
        int position = -1;
        if (A[start] == target) {
            position = start;
        } else if (A[end] == target) {
            position = end;
        }
        // find the position of target in input array
        while (A[start] != A[end] && position < 0) {
            // already found
            if (A[start] == target) {
                position = start;
                break;
            } else if (A[end] == target) {
                position = end;
                break;
            }
            int mid = (start + end) / 2; 
            if (mid == start || mid == end) {
                break;
            }
            int mvalue = A[mid];
            if (mvalue == target) {
                position = mid;
                break;
            } else if (mvalue > target) {
                end = mid;
            } else if (mvalue < target) {
                start = mid;
            }
        
        }
        if (position < 0) {
            int [] notfound = {-1, -1};  
            return notfound;
        }
        // bi-directional search to determine start and end position
        int [] found = {position, position};
        for (int i = position-1; i >= 0; i--) {
            if (A[i] == target) {
                found[0] = i;
            }
        }
        for (int i = position+1; i < nIntegers; i++)  {
            if (A[i] == target) {
                found[1] = i;
            }
        }
        return found;
    }
}
