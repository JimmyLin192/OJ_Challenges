############################################################
##    FILENAME:   002_AddTwoNumbers.py    
##    VERSION:    1.0
##    SINCE:      2015-10-23
##    AUTHOR: 
##        Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
##
############################################################
##    Edited by MacVim
##    Documentation auto-generated by Snippet 
############################################################

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @return a ListNode
    def addTwoNumbers(self, l1, l2):
        # read value l1 as A 
        A, A_power = 0, 0
        while l1 is not None:
            A = A + l1.val * 10 ** A_power
            l1 = l1.next
            A_power += 1
            
        # read value l2 as B
        B, B_power = 0, 0
        while l2 is not None:
            B = B + l2.val * 10 ** B_power
            l2 = l2.next
            B_power += 1
            
        # add up
        C = A + B
        
        # construct a new linked list
        tmplist = []
        while C > 0:
            tmplist = [C%10] + tmplist
            C /= 10
            
        if len(tmplist) == 0: return ListNode(0)
        l3 = None
        for x in tmplist:
            tmpNode = ListNode(x)
            if l3 is None: l3 = tmpNode
            else: 
                tmpNode.next = l3
                l3 = tmpNode
        
        # return it
        return l3
