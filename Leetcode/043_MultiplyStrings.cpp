/*###############################################################
## MODULE: 043_MultiplyStrings.cpp
## VERSION: 1.0 
## SINCE 2015-10-23
## AUTHOR Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

class Solution {
public:
    string add(string num1, string num2) {
        if (num1.size() == 0) return num2;
        if (num2.size() == 0) return num1;
        // now we can presume that neither num1 and num2 are empty string
        int i = num1.size() - 1;
        int j = num2.size() - 1;
        int acc = 0;
        string res = "";
        while (i >= 0 or j >= 0 or acc > 0 ) {
            int a = 0, b = 0; 
            if (i >= 0) a = num1.at(i) - '0';
            if (j >= 0) b = num2.at(j) - '0';
            char sum = (a + b + acc) % 10 + '0';
            acc = (a + b + acc) / 10;
            res.push_back(sum);
            i -- ; j --;
        }
        string realres = "";
        int res_size = res.size();
        for (int k = res_size-1; k >= 0; k--) 
            realres.push_back(res.at(k));
        return realres;
    }
    string multiply(string num1, char num2, int order) {
        if (num2 == '0') return "0";
        int i = num1.size() - 1;
        int acc = 0;
        string res = "";
        int b = num2 - '0';
        while (i >= 0 or acc > 0) {
            int a = 0; 
            if (i >= 0) a = num1.at(i) - '0';
            char prod = (a * b + acc) % 10 + '0';
            acc = (a * b + acc) / 10;
            res.push_back(prod);
            i -- ;
        }
        string realres = "";
        int res_size = res.size();
        for (int k = res_size-1; k >= 0; k--) 
            realres.push_back(res.at(k));
        for (int k = 0; k < order; k ++) 
            realres.push_back('0');
        return realres;
    }
    string multiply(string num1, string num2) {
        int num1_size = num1.size();
        int num2_size = num2.size();
        if (num1_size == 0) return num2;
        if (num2_size == 0) return num1;
        string opr1 = num1_size >= num2_size? num1:num2; 
        string opr2 = num1_size >= num2_size? num2:num1; 
        int opr1_size = max(num1_size, num2_size);
        int opr2_size = min(num1_size, num2_size);
        int order = 0;
        vector<string> prods;
        for (int i = opr2_size-1; i >= 0; i --) {
            char digit = opr2.at(i);
            prods.push_back(multiply (opr1, digit, order)); 
            order ++; 
        }
        string res = prods[0];
        for (int i = 1; i < opr2_size; i ++)
            res = add (res, prods[i]); 
        return res; 
    }
};
