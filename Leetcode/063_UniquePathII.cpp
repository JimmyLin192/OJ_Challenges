/*###############################################################
## MODULE: 063_UniquePathII.cpp
## VERSION: 1.0 
## SINCE 2015-10-23
## AUTHOR Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        if (!m) return 0;
        int n = obstacleGrid[0].size();
        if (!n) return 0; 
        if (m == 1 and n == 1) return obstacleGrid[0][0]?0:1;
        vector<vector<int>> T (m, vector<int>(n, 1));
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (obstacleGrid[i][j]==1) {
                    T[i][j] = 0;
                    continue;
                }
                if (i == 0 and j == 0) continue;
                int path_left = 0, path_top = 0;
                if (i > 0) path_top = T[i-1][j];
                if (j > 0) path_left = T[i][j-1];
                T[i][j] = path_left + path_top;
            }

        }
       
        return T[m-1][n-1];
    }
};
