/*###############################################################
## MODULE: 072_EditDistance.cpp
## VERSION: 1.0 
## SINCE 2015-10-23
## AUTHOR Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##      Smith_Waterman Algorithm to achieve a local sequence alignment
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        if (!n1) return n2;
        if (!n2) return n1;
        vector<vector<int>> T (n1+1, vector<int>(n2+1, 0));
        for (int i = 0; i < n1+1; i ++) {
            for (int j = 0; j < n2+1; j ++) {
                if (i == 0) T[i][j] = j;
                if (j == 0) T[i][j] = i;
                if (i == 0 or j == 0) continue;
                int min_score = INT_MAX;
                int match_score = (word1.at(i-1) == word2.at(j-1))?0:1; 
                min_score = min(min_score, T[i-1][j]+1); // insertion
                min_score = min(min_score, T[i][j-1]+1); // deletion
                min_score = min(min_score, T[i-1][j-1]+match_score); // replace or match
                T[i][j] = min_score;
            }
        }
        return T[n1][n2];
    }
};
