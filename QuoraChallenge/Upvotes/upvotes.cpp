/*###############################################################
## MODULE: upvotes.cpp
## VERSION: 1.0 
## SINCE 2015-10-06
## AUTHOR Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##     upvotes problem from the Quora Challenge
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

using namespace std;
#include <iostream>
#include <vector>

// #define UPVOTE_DEBUG // uncomment this to debug
const long N_MAX = 100000;

int main (int argn, char** argv) {
    long N; // length of given string;
    long K; // window size
    // read from stdin 
    cin >> N >> K;
    // check for constraints
    if (not (1 <= N and N <= N_MAX)) exit(1);
    if (not (K <= N)) exit(1);
#ifdef UPVOTE_DEBUG
    cout << "N: " << N << endl;
    cout << "K: " << K << endl;
#endif
    vector<long> counts(N, 0); // counts of counts
    for (long i = 0; i < N; i ++) {
        cin >> counts[i];
#ifdef UPVOTE_DEBUG
        cout << counts[i] << endl;
#endif
    }
    // Dynamic programming to compute if (s, e) is non_dec and non_inc
    vector<vector<bool> > non_dec(K-1, vector<bool>() );
    vector<vector<bool> > non_inc(K-1, vector<bool>() );
    for (long k = 2; k <= K; k ++) { // k is current win_size
        // k = 2 base case: window size is 2
        if (k == 2) {
            for (long i = 0; i < N-1; i ++) {
                bool non_dec_val = (counts[i] <= counts[i+1]);
                bool non_inc_val = (counts[i+1] <= counts[i]);
                non_dec[0].push_back(non_dec_val);
                non_inc[0].push_back(non_inc_val);
            }
        }
        // k > 2 inductive case: windows size greater than 2
        else {
            for (long j = 0; j < N-k+1; j ++) {
                bool non_dec_val = (non_dec[k-3][j] and non_dec[k-3][j+1]);
                bool non_inc_val = (non_inc[k-3][j] and non_inc[k-3][j+1]);
                non_dec[k-2].push_back(non_dec_val);
                non_inc[k-2].push_back(non_inc_val);
            }
        }
    }
#ifdef UPVOTE_DEBUG
    for (long i = 0; i < K-1; i ++) {
        for (int j = 0; j < non_dec[i].size(); j++) 
            cout << non_dec[i][j];
        cout << endl;
    }
    for (long i = 0; i < K-1; i ++) {
        for (int j = 0; j < non_dec[i].size(); j++) 
            cout << non_inc[i][j];
        cout << endl;
    }
#endif
    // count the number of true
    vector<long> non_dec_count (N-K+1, 0);
    vector<long> non_inc_count (N-K+1, 0);
    // base case: 
    for (long k = 2; k <= K; k ++) {
        for (long j = 0; j < K-k+1; j++) {
            non_dec_count[0] += non_dec[k-2][j]?1:0;
            non_inc_count[0] += non_inc[k-2][j]?1:0;
        }
    }
    // inductive incrementation: 
    for (int i = 1; i < N-K+1; i ++) {
        non_dec_count[i] = non_dec_count[i-1];
        non_inc_count[i] = non_inc_count[i-1];
        for (int k = 2; k <= K; k++) {
            non_dec_count[i] -= non_dec[k-2][i-1]?1:0;
            non_inc_count[i] -= non_inc[k-2][i-1]?1:0;
        }
        for (int k = 2; k <= K; k++) {
            non_dec_count[i] += non_dec[k-2][K-k+i]?1:0;
            non_inc_count[i] += non_inc[k-2][K-k+i]?1:0;
        }
    }
#ifdef UPVOTE_DEBUG
    for (int i = 0; i < N-K+1; i ++) 
        cout << non_dec_count[i] << " against " << non_inc_count[i] << endl;
#endif
    // output to stdout
    for (long i = 0; i < N-K+1; i ++) 
        cout << non_dec_count[i] - non_inc_count[i] << endl;
}
